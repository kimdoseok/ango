package main


import "net/http"

type Repository interface {
	Populate()
	Get(code string) (*ErrorCode, error)
	List(filter string) ([]ErrorCode, error)
	Save(param *ErrorCode) error
	Delete(code string) error
}
type (
	Alumni struct {
		ID             int    `gorm:"primary_key" json:"id"`
		FirstName      string `gorm:"type:text; default:''; not null" json:"first_name"`
		LastName       string `gorm:"type:text; default:''; not null" json:"last_name"`
		Title          string `gorm:"type:text; default:''; not null" json:"title"`
		Major          string `gorm:"type:text; default:''; not null" json:"major"`
		GraduationYear int    `gorm:"type:integer; default:0; not null" json:"graduation_year"`
		Email          string `gorm:"type:text; default:''; not null" json:"email"`
		Phone          string `gorm:"type:text; default:''; not null" json:"phone"`
		Address        string `gorm:"type:text; default:''; not null" json:"address"`
		City           string `gorm:"type:text; default:''; not null" json:"city"`
		State          string `gorm:"type:text; default:''; not null" json:"state"`
		Country        string `gorm:"type:text; default:''; not null" json:"country"`
		ZipCode        string `gorm:"type:text; default:''; not null" json:"zip_code"`
		Company        string `gorm:"type:text; default:''; not null" json:"company"`
		Position       string `gorm:"type:text; default:''; not null" json:"position"`
		WorkEmail      string `gorm:"type:text; default:''; not null" json:"work_email"`
		WorkPhone      string `gorm:"type:text; default:''; not null" json:"work_phone"`
		WorkAddress    string `gorm:"type:text; default:''; not null" json:"work_address"`
		WorkCity       string `gorm:"type:text; default:''; not null" json:"work_city"`
		WorkState      string `gorm:"type:text; default:''; not null" json:"work_state"`
		WorkCountry    string `gorm:"type:text; default:''; not null" json:"work_country"`
		WorkZipCode    string `gorm:"type:text; default:''; not null" json:"work_zip_code"`
	}
	
}

